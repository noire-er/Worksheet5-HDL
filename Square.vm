push argument 0
// pushes first argument
pop local 3
// store it in local 3
push constant 0

push local 3

gt
// check if argument is greater than zero
if-goto NEGATIVE
// If it is greater than zero, then move to NEGATIVE


goto START
// Otherwise go to START
label NEGATIVE

push local 3

neg
// Make it positive to - argument
pop local 3
// store it back in local 3

label START


push local 3  

push local 3   

call Square.Mult 2          // Call Square.Mult(x, x) â†’ square the number

label end
goto end

function Square.Mult 2  // Two local vars: sum, counter

push constant 0  

pop local 0  // local 0 = sum = 0

push argument 1

pop local 1       // local 1 = counter = y


label MULT_LOOP

push local 1

push constant 0

eq

if-goto MULT_END  // If counter == 0, exit


push local 0      

push argument 0

add              

pop local 0      // sum += x


push local 1

push constant 1

sub              

pop local 1      // counter--


goto MULT_LOOP


label MULT_END

push local 0      // Return sum

return