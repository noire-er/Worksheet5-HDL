//// COMPUTE THE BITWISE EXCLUSIVE OR.
// This function takes two arguments and pushes the exclusive
// OR of its bits onto the stack. This function implements the
// formula:
//    x XOR y = (x AND (NOT y)) OR ((NOT x) and y)
// To call this function, you should:
//   1. push the two arguments onto the stack; and
//   2. call this function with `call Sys.xor 2`.
// Before returning, the function pushes the result onto the
// stack, so that, from the point of view of the callee, the
// result is at the top of the stack.
//
function Sys.xor 0
    // Your implementation goes here.
    push argument 0         // here we push the first argument on the stack
    push argument 1         // here we push second argument
    add                     // performs addition of the arguments in lines 15 and 16

    push argument 0         // here we push first arguement again
    push argument 1         // here we push second argument again
    and                     // here we perform AND on argument 1 and 2
    push argument 0         // pushes argument 1
    push argument 1         // pushes argument 2
    and                     // another AND operation
    add                     // Addition of the 2 AND results
   
   
     return                  // returns the top value on stack, aka the result of XOR (a,b) which is a + b - 2 multiply (A AND B)



//// SHIFT A VALUE LEFT BY REPEATED ADDITION.
// This function takes two arguments and pushes the first argument
// shifted left by as many position as indicated by the second
// argument. To call this function, you should:
//   1. push the two arguments (number to be shifted and number of
//      shift positions) onto the stack; and
//   2. call this function with `call Sys.shiftLeft 2`.
// Before returning, the function pushes the result onto the
// stack, so that, from the point of view of the callee, the
// result is at the top of the stack.
//
function Sys.shiftLeft 2
    // Your implementation goes here.
    push argument 1     // here we push argument
    push constant 0     
    eq                  // checks if the argument, i.e. g. we pushed is == 0
    if-goto RETURN_Y    // if it is == 0, Go to RETURN_Y

    push constant 0
    pop local 0         // here in these two line we are initializing the counter

    push argument 0
    pop local 1
                        // here we are initializing the results to x
label SHIFTLOOP
                        // if the counter is equal to g then exit the loop we have made
    push local 0        
    push argument 1
    eq
    if-goto SHIFTENDOFLOOP

    push local 1        // here we push local 1
    push local 1        // here we push local 1 again
    add                 // ADD local 1 and local 1, therefore we are multiplying local by 2
    pop local 1

    push local 0        // here we are incrementing the counter 
    push constant 1
    add
    pop local 0

    goto SHIFTLOOP

label SHIFTENDOFLOOP

    push local 1
    return
                        // Returning the result
label RETURN_Y
    push argument 0
        
    return



//// COMPUTE THE PARITY OF THE BOTTOM 15 BITS OF AN INTEGER.
// This function takes one arguments and pushes the parity of
// the fifteen right-most bits onto the stack. The possible output
// values are 1, if the number of 1s in the right-most fifteen
// bits is odd, or 0, if the number of 1s in the right-most
// fifteen bits is even. Here is some example output:
//
//     INPUT (binary)  | OUT |         NOTES
//    -----------------+-----+-----------------------
//    1000000000000000 |  0  | Left-most bit ignored.
//    0000000000000001 |  1  |
//    1000000000000001 |  1  | Left-most bit ignored.
//    0111111111011111 |  0  |
//    0111111111111111 |  1  |
//    1111111111111111 |  1  | Left-most bit ignored.
//
// To call this function, you should:
//   1. push the argument onto the stack; and
//   2. call this function with `call Sys.computeParity 1`.
// Before returning, the function pushes the result onto the
// stack, so that, from the point of view of the callee, the
// result is at the top of the stack.
//
function Sys.computeParity 2
    // Your implementation goes here.
    return


//// SET LEFT-MOST BIT TO PARITY BIT.
// This function takes one 16-bit string and pushes onto the stack
// the same bit string with the left-most bit set to the parity
// bit of the 15 right-most bits. Here is some example output:
//
//     INPUT (binary)  | OUTPUT (binary)  |         NOTES
//    -----------------+------------------+-----------------------
//    1000000000000000 | 0000000000000000 | Left-most bit ignored.
//    0000000000000001 | 1000000000000001 |
//    1000000000000001 | 1000000000000001 | Left-most bit ignored.
//    0111111111011111 | 0111111111011111 |
//    0111111111111111 | 1111111111111111 |
//    1111111111111111 | 1111111111111111 | Left-most bit ignored.
//
// To call this function, you should:
//   1. push the the argument onto the stack; and
//   2. call this function with `call Sys.encode 1`.
// Before returning, the function pushes the result onto the
// stack, so that, from the point of view of the callee, the
// result is at the top of the stack.
//
function Sys.encode 0
    // Your implementation goes here.
    return



// The emulator will start executing from here. You can modify
// the code below while testing and debugging your code, but
// please revert your changes before submitting to Gradescope;
// otherwise, your submission will most likely fail all tests.
//
// A better way to test your code is to use the supplied file
//   Sys.tst
// with the virtual machine emulator. Please do not submit this
// file to Gradescope, as this will cause your submission to be
// rejected.
//
function Sys.init 0
    call Sys.encode 1

label WHILE
    goto WHILE
